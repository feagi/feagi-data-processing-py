# This file is autogenerated by maturin v1.8.3
# To update, run
#
#    maturin generate-ci github
#
name: Staging Merge - Prerelease

on:
  pull_request:
    branches: [ staging ]
    types: [ closed ]

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    # Only run if the PR was actually merged (not just closed)
    if: github.event.pull_request.merged == true
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: x86
          - runner: ubuntu-22.04
            target: aarch64
          - runner: ubuntu-22.04
            target: armv7
          - runner: ubuntu-22.04
            target: s390x
          - runner: ubuntu-22.04
            target: ppc64le
    steps:
      - uses: actions/checkout@v4
        with:
          ref: staging  # Ensure we're on the staging branch after merge
      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: true
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  musllinux:
    runs-on: ${{ matrix.platform.runner }}
    if: github.event.pull_request.merged == true
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: x86
          - runner: ubuntu-22.04
            target: aarch64
          - runner: ubuntu-22.04
            target: armv7
    steps:
      - uses: actions/checkout@v4
        with:
          ref: staging
      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: true
          manylinux: musllinux_1_2
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}
          path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    if: github.event.pull_request.merged == true
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
        with:
          ref: staging
      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          architecture: ${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: true
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    if: github.event.pull_request.merged == true
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
        with:
          ref: staging
      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: true
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v4
        with:
          ref: staging
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  prerelease:
    name: Create Prerelease
    runs-on: ubuntu-latest
    needs: [linux, musllinux, windows, macos, sdist]
    if: github.event.pull_request.merged == true
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: staging
      
      - name: Get version from Cargo.toml
        id: version
        run: |
          # Check if Cargo.toml exists
          if [ ! -f "Cargo.toml" ]; then
            echo "❌ Error: Cargo.toml not found"
            exit 1
          fi
          
          # Extract version
          VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          if [ -z "$VERSION" ]; then
            echo "❌ Error: Could not extract version from Cargo.toml"
            cat Cargo.toml
            exit 1
          fi
          
          # Extract package name and convert hyphens to underscores for Python
          PACKAGE_NAME=$(grep '^name = ' Cargo.toml | head -1 | sed 's/name = "\(.*\)"/\1/' | tr '-' '_')
          if [ -z "$PACKAGE_NAME" ]; then
            echo "❌ Error: Could not extract package name from Cargo.toml"
            cat Cargo.toml
            exit 1
          fi
          
          # Output the values
          echo "Version: $VERSION"
          echo "Package name: $PACKAGE_NAME"
          
          # Set GitHub outputs
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "package_name=${PACKAGE_NAME}" >> "$GITHUB_OUTPUT"
      
      - uses: actions/download-artifact@v4
        with:
          path: dist
      
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'dist/*'
      
      - name: Upload wheels to TestPyPI
        uses: PyO3/maturin-action@v1
        with:
          command: ''
          args: >
            upload
            --non-interactive
            --username __token__
            --password ${{ secrets.TEST_PYPI_DATA_PROCESSING }}
            --skip-existing
            --repository-url https://test.pypi.org/legacy/
            dist/*
              
      - name: Create prerelease tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          TAG_NAME="v${{ steps.version.outputs.version }}-pre"
          echo "Creating prerelease tag: $TAG_NAME"
          
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create GitHub Prerelease
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}-pre
          release_name: Prerelease v${{ steps.version.outputs.version }}
          body: |
            🚀 Python Prerelease of ${{ steps.version.outputs.package_name }} v${{ steps.version.outputs.version }}
            
            This is a prerelease version from the staging branch.
            
            **Installation from TestPyPI:**
            ```bash
            pip install --index-url https://test.pypi.org/simple/ ${{ steps.version.outputs.package_name }}==${{ steps.version.outputs.version }}
            ```
            
            **Changes:**
            - Version: ${{ steps.version.outputs.version }}
            - Branch: staging
            - Commit: ${{ github.sha }}
            
            **Build Information:**
            - ✅ Linux wheels (x86_64, x86, aarch64, armv7, s390x, ppc64le)
            - ✅ MuslLinux wheels (x86_64, x86, aarch64, armv7)
            - ✅ Windows wheels (x64, x86)
            - ✅ macOS wheels (x86_64, aarch64)
            - ✅ Source distribution included
            - ✅ Published to TestPyPI
            - ✅ Artifacts signed and attested
            
            **Note:** This version has been published to TestPyPI for testing purposes.
          draft: false
          prerelease: true
