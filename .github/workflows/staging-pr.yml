# This file is autogenerated by maturin v1.8.3
# To update, run
#
#    maturin generate-ci github
#
name: Staging PR Tests

on:
  pull_request_target:
    branches: staging

permissions:
  contents: read

jobs:
  test-and-version-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}

      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Run Rust tests
        run: cargo test --verbose

      - name: Build wheels (Linux x86_64)
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist --find-interpreter
      
      - name: Install and test wheel
        run: |
          pip install dist/*.whl
          python -c "import feagi_data_processing; print('✅ Package imports successfully')"

      - name: Install packaging module for version comparison
        run: pip install packaging

      - name: Check version number increase
        run: |
          # Get current version from PR branch (only the package version, not dependencies)
          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "PR branch version: $CURRENT_VERSION"
          
          # Download staging branch Cargo.toml
          curl -s https://raw.githubusercontent.com/feagi/feagi-data-processing-py/refs/heads/staging/Cargo.toml -o staging_cargo.toml
          
          # Get version from staging branch (only the package version, not dependencies)
          STAGING_VERSION=$(grep '^version = ' staging_cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "Staging branch version: $STAGING_VERSION"
          
          # Clean up
          rm staging_cargo.toml
          
          # Validate versions are not empty
          if [ -z "$CURRENT_VERSION" ] || [ -z "$STAGING_VERSION" ]; then
            echo "❌ Error: Could not extract versions properly"
            echo "Current: '$CURRENT_VERSION'"
            echo "Staging: '$STAGING_VERSION'"
            exit 1
          fi
          
          # Compare versions
          if [ "$CURRENT_VERSION" = "$STAGING_VERSION" ]; then
            echo "❌ Error: Version must be increased from staging branch"
            exit 1
          fi
          
          # Use Python for reliable version comparison with environment variables
          export STAGING_VER="$STAGING_VERSION"
          export CURRENT_VER="$CURRENT_VERSION"
          
          python3 << 'EOF'
          import os
          from packaging import version
          import sys
          
          staging_ver = os.environ['STAGING_VER'].strip()
          current_ver = os.environ['CURRENT_VER'].strip()
          
          print(f'Comparing: {staging_ver} vs {current_ver}')
          
          try:
              if version.parse(current_ver) <= version.parse(staging_ver):
                  print(f'❌ Error: Version must be higher than staging branch')
                  print(f'Current: {current_ver} is not greater than Staging: {staging_ver}')
                  sys.exit(1)
              else:
                  print(f'✅ Version check passed: {staging_ver} → {current_ver}')
          except Exception as e:
              print(f'❌ Error parsing versions: {e}')
              print(f'Staging version: "{staging_ver}"')
              print(f'Current version: "{current_ver}"')
              sys.exit(1)
          EOF
